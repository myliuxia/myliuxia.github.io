(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{440:function(t,a,e){"use strict";e.r(a);var r=e(6),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("blockquote",[e("p",[t._v("总结前端工程师需要掌握的Javascript基础知识点\n")])]),t._v(" "),e("h1",{attrs:{id:"执行机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行机制"}},[t._v("#")]),t._v(" 执行机制")]),t._v(" "),e("h2",{attrs:{id:"为何try里面放return-finally还会执行-理解其内部机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为何try里面放return-finally还会执行-理解其内部机制"}},[t._v("#")]),t._v(" 为何"),e("code",[t._v("try")]),t._v("里面放"),e("code",[t._v("return")]),t._v("，"),e("code",[t._v("finally")]),t._v("还会执行，理解其内部机制")]),t._v(" "),e("h2",{attrs:{id:"javascript如何实现异步编程-可以详细描述eventloop机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript如何实现异步编程-可以详细描述eventloop机制"}},[t._v("#")]),t._v(" "),e("code",[t._v("JavaScript")]),t._v("如何实现异步编程，可以详细描述"),e("code",[t._v("EventLoop")]),t._v("机制")]),t._v(" "),e("h2",{attrs:{id:"宏任务和微任务分别有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#宏任务和微任务分别有哪些"}},[t._v("#")]),t._v(" 宏任务和微任务分别有哪些")]),t._v(" "),e("h2",{attrs:{id:"可以快速分析一个复杂的异步嵌套逻辑-并掌握分析方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可以快速分析一个复杂的异步嵌套逻辑-并掌握分析方法"}},[t._v("#")]),t._v(" 可以快速分析一个复杂的异步嵌套逻辑，并掌握分析方法")]),t._v(" "),e("h2",{attrs:{id:"使用promise实现串行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用promise实现串行"}},[t._v("#")]),t._v(" 使用"),e("code",[t._v("Promise")]),t._v("实现串行")]),t._v(" "),e("h2",{attrs:{id:"node与浏览器eventloop的差异"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node与浏览器eventloop的差异"}},[t._v("#")]),t._v(" "),e("code",[t._v("Node")]),t._v("与浏览器"),e("code",[t._v("EventLoop")]),t._v("的差异")]),t._v(" "),e("h2",{attrs:{id:"如何在保证页面运行流畅的情况下处理海量数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何在保证页面运行流畅的情况下处理海量数据"}},[t._v("#")]),t._v(" 如何在保证页面运行流畅的情况下处理海量数据")])])}),[],!1,null,null,null);a.default=s.exports}}]);